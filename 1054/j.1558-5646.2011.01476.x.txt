         ORIGINAL ARTICLE
COALESCENT-BASED SPECIES TREE INFERENCE FROM GENE TREE TOPOLOGIES UNDER INCOMPLETE LINEAGE SORTING BY MAXIMUM LIKELIHOOD
Yufeng Wu1,2
1Department of Computer Science and Engineering, University of Connecticut, Storrs, Connecticut 06269
2E-mail: ywu@engr.uconn.edu
Received April 19, 2011
Accepted September 25, 2011
Data Archived: Dryad: doi:10.5061/dryad.240h7g8r
Incomplete lineage sorting can cause incongruence between the phylogenetic history of genes (the gene tree) and that of the species (the species tree), which can complicate the inference of phylogenies. In this article, I present a new coalescent-based algorithm for species tree inference with maximum likelihood. I first describe an improved method for computing the probability of a gene tree topology given a species tree, which is much faster than an existing algorithm by Degnan and Salter (2005). Based on this method, I develop a practical algorithm that takes a set of gene tree topologies and infers species trees with maximum likelihood. This algorithm searches for the best species tree by starting from initial species trees and performing heuristic search to obtain better trees with higher likelihood. This algorithm, called STELLS (which stands for Species Tree InfErence with Likelihood for Lineage Sorting), has been implemented in a program that is downloadable from the author’s web page. The simulation results show that the STELLS algorithm is more accurate than an existing maximum likelihood method for many datasets, especially when there is noise in gene trees. I also show that the STELLS algorithm is efficient and can be applied to real biological datasets.
K E Y W O R D S : Coalescent models, gene trees and species trees, estimation.
It is commonly observed that phylogenetic trees (called gene trees) inferred from DNA sequences of individual genes are not always identical (Maddison 1997). This may be caused by different biological processes. Incomplete lineage sorting (or simply lineage sorting) is caused by the inherent stochasticity of population genealogical processes, and may be more widespread than the other processes (Edwards 2009). There is a large and growing literature on incomplete lineage sorting. Refer to these surveys (Maddison 1997; Felsenstein 2004; Maddison and Knowles 2006; Edwards 2009) for information on lineage sorting. See Figure 1 for an example that illustrates the concept of incomplete lineage sorting.
The incongruence between gene trees and the species tree caused by lineage sorting greatly complicates species tree inference. As reviewed by Edwards (2009), the concatenation approach
incomplete lineage sorting, maximum likelihood, species tree
has been widely used previously, alhough it does not explicitly address lineage sorting. The concatenation approach concatenates sequences of multiple genes, and then uses the concatenated sequences to infer the species tree. However, the concatenation approach may give misleading results on species tree inference (Kubatko and Degnan 2007; Edwards 2009). This motivates the development of new species tree inference methods that explicitly consider the effect of lineage sorting. During the past several years, several such methods have been developed. These include: parsimony-based methods to minimize the deep coalescences (Maddison and Knowles 2006; Than and Nakhleh 2009); Bayesian approaches (Liu and Pearl 2007; Liu 2008; Heled and Drummond 2010; Fan and Kubatko 2011); maximum likelihood approaches (Kubatko et al. 2009; Liu et al. 2010); and other
doi:10.1111/j.1558-5646.2011.01476.x
 ⃝C 2011 The Author. Evolution ⃝C 2011 The Society for the Study of Evolution. 7 6 3 Evolution 66-3: 763–775

         YUFENG WU
 Figure 1. A gene tree (thin lines) in the species tree (thick lines). Interior nodes of the gene tree correspond to coalescent events of gene lineages. The species tree is shown separately in (B), so is the gene tree topology in (C).
statistical estimators (Liu et al. 2009; Mossel and Roch 2010). Despite this recent progress in methodology development, incomplete lineage sorting remains a challenge for phylogenetic inference.
In this article, I develop a new coalescent-based algorithm (called STELLS [which stands for Species Tree InfErence with Likelihood for Lineage Sorting]) for inferring the species tree from a set of gene tree topologies with maximum likelihood. The following are the features of (and assumptions made by) the STELLS algorithm:
1. The STELLS algorithm is based on a peeling-style algorithm for computing the probability of a gene tree topology given a species tree. The gene tree probability algorithm is faster than a previous method by Degnan and Salter (2005) for larger gene and species trees. The gene tree probability algorithm is not an approximation: it computes exactly the same gene tree probability as Degnan and Salter (2005).
2. The STELLS algorithm for species tree inference is a coalescent-based maximum likelihood approach. This implies that STELLS assumes panmictic species, no population structure, no gene flow between species, no hybridization, and no hidden paralogy. The STELLS algorithm also assumes free recombination between genes (i.e., independent gene tree topologies).
3. Similar to Kubatko et al. (2009), the STELLS algorithm maximizes the likelihood of the species tree for known gene trees. The STELLS algorithm infers a species tree with branch lengths. Branch lengths on the estimated species tree are in coalescent units. The approach in Kubatko et al. (2009) uses branch lengths in the gene trees. In contrast, the STELLS algorithm takes topologies of gene trees (with no branch lengths). STELLS and the method in Kubatko et al. (2009) maximize different likelihood functions. This has pros and cons in terms of robustness to assumptions and efficiency (see the Results section).
4. The likelihood being computed in STELLS is the likelihood of the gene tree topologies assuming that the gene tree topologies are correctly inferred. In practice noise cannot be completely eradicated. Even though the STELLS algorithm does not explicitly model the uncertainty of gene tree estimation from sequences, it performs relatively well even when there is some noise in gene tree topologies.
5. The STELLS algorithm allows multiple sampled gene lineages from a species.
Background
DEFINITIONS
In this article, the coalescent view of time by going backward in time is taken. To avoid confusion in the direction of time, I annotate the terms “before” and “after” with “more recent” and “more ancient,” whichever are appropriate in the context. A phylogenetic tree is viewed as rooted in the “top” and time flows downwards (as shown in Fig. 1). Thus, when I say a node a is above a node b in a tree, I mean that a is more ancient than b. The root of a phylogenetic tree T is denoted as r(T). To refer to a branch in a phylogenetic tree, I sometimes use the descendant node of the branch, and say the branch ends at this node. Sometimes a number b is used to refer to a tree branch. λb denotes the length of branch b of the species tree. The unit of branch length of the species tree is in the standard coalescent time. There is a special branch (called the root branch and denoted as the branch b = 0) ending at the root of the species tree, whose length is infinite.
The species tree is assumed to be a rooted binary phylogenetic tree. Each branch of a species tree has a length. As in Degnan and Salter (2005), a gene tree is assumed to be rooted and bifurcating in this article. A branch in a gene tree is called a gene lineage. The word “species” refers to a species tree (internal or leaf) node. Each gene lineage l originates from some species s, and l is said to be from the species s. Multiple gene lineages are allowed from one species (see Fig. 1 for an example).
The lowest common ancestor (LCA) of two nodes a and b on a tree is denoted as LCA(a,b). The LCA of a set of nodes S is denoted as LC A(S). For convenience, the LCA of two gene
 764 EVOLUTION MARCH2012

         lineages x and y on a tree is defined to be LCA(a,b), where x ends at a and y ends at b. A clade is associated with a subtree (rooted at a node v) of the species tree Ts, which means that the clade contains all the species within the subtree. Since the clade and the node v are one-to-one correspondence in this case, for convenience, the node v is used to refer to both the subtree rooted at v and the clade corresponding to this subtree. The clade containing all species in the species tree is called the root clade.
There are many well-established methods for inferring individual gene trees. Many current species tree inference methods (Kubatko et al. 2009; Mossel and Roch 2010; Than and Nakhleh 2009, for example) take gene trees (or gene tree topologies) as input. The STELLS algorithm in this article also takes inferred gene trees (not gene sequences) to infer species trees. Some methods, such as STELLS and the deep coalescence minimization method (Maddison and Knowles 2006), do not require branch lengths of gene trees. In this case, such a gene tree is called a “gene tree topology,” to distinguish from a gene tree with branch lengths (called a full gene tree or just gene tree). There are methods that require full gene trees (Kubatko et al. 2009; Liu et al. 2010; Mossel and Roch 2010, for example).
COMPUTING THE GENE TREE PROBABILITY
For a given species tree Ts, coalescent theory (Kingman 1982) allows the computation of the probability of a gene tree topology Tg . Following Degnan and Salter (2005), the probability of a gene tree topology (not a full gene tree) given a species tree is called the gene tree probability. For small gene and species trees, coalescent theory can be directly applied to compute gene tree probabilities (e.g., Takahata and Nei 1985). For larger trees, an algorithm is needed. Degnan and Salter (2005) developed such an algorithm for computing gene tree probability. Their method is based on a classical result in coalescent theory. The probability of u gene lineages coalescing into v gene lineages (where v ≤ u) within a fixed amount of time T is denoted as puv(T). Assuming that any two gene lineages can coalesce, puv (T ) has a closed-form formula:
First, two gene lineages in a gene tree topology may coalesce on different branches (along the path from the LCA of their corresponding species and going up, including the root branch) in the species tree, due to lineage sorting. That is, a gene tree topology does not indicate along which branch of the species tree two gene lineages coalesce, and thus it is often unknown how many gene lineages coalesce along a species tree branch. To overcome this obstacle, Degnan and Salter (2005) use an enumeration method. They enumerate all possible choices of species tree branches for the coalescent events in a gene tree topology. For example, consider two gene lineages a′ and b in Figure 1, which can coalesce along three branches of the species tree: the branch ending at LCA(A,B), the branch ending at LCA(A,B,C), and the root branch. A coalescent history h chooses one of the three choices for this event (and for all other events), so that the choices are consistent with the gene tree topology. This allows one to compute the probability of these coalescent events of each branch using equation (1) for a particular history.
The second obstacle is that equation (1) does not consider the constraints by the gene tree topology on the choices of gene lineagecoalescences.Forexample,supposerightatLCA(A,B,C) in the species tree, there are gene lineages a, a′, b, and c for the gene and species trees in Figure 1. The gene tree topology requires that gene lineages a′ and b must coalesce first, whereas equation (1) does not enforce such constraint. To quantify this effect, Degnan and Salter (2005) define two combinatorial factors for each branch b of the species tree and a particular coalescent history h: ωb (h) and db (h). ωb (h) is the number of ways that coalescent events specified by the history h on branch b can occur that are consistent with the gene tree topology, and db(h) is the total number of ordering of coalescent events on b implied by h. Both factors can be computed easily using formulas in Degnan and Salter (2005).
The method of Degnan and Salter (2005), which is implemented in the program COAL, essentially sums over all possible coalescent histories for computing the gene tree probability. This is the first systematic approach of computing gene tree probability. However, their method becomes very slow as the tree size increases. For example, the number of histories to enumerate can be over 1.7 billion for 20 taxa (Degnan and Salter 2005). Also, the program COAL appears to give less-accurate results for larger trees, which may be due to numerical problems. Thus, their method becomes impractical for larger trees. In this article, I give a faster algorithm for computing gene tree probability.
More Efficient Computation
of Gene Tree Probability
In this section, I present a faster algorithm for computing the probability for a gene tree topology Tg given a fixed species
􏰗u puv(T) =
k=v
e−k(k−1)T/2 k−1
(2k − 1)(−1)k−v v!(k − v)!(v + k − 1)
􏰢 (v + y)(u − y) ×(u+y).(1)
SPECIES TREE INFERENCE UNDER LINEAGE SORTING
  y=0
This is the equation (1) in Degnan and Salter (2005), which has been derived by several authors before (Tavare` 1984; Watterson 1984; Takahata and Nei 1985). Also see Wakeley (2008); Rosenberg (2002). Thus, if equation (1) is used to compute the probability of coalescent events on each branch of the species tree, products of these probabilities can be used in calculating the gene tree probability. However, there are two obstacles to overcome before the gene tree probability can be computed.
 EVOLUTION MARCH2012 765

         YUFENG WU
tree Ts. As explained earlier, gene tree probability computation plays an important role in the gene tree and species tree problem. This algorithm is also the main building block of the new STELLS algorithm for species tree inference. As opposed to Degnan and Salter’s approach, this new algorithm does not enumerate all consistent coalescent histories. Instead, it takes a bottom-up approach by considering each clade of Ts and using a recurrence to compute the probabilities of the so-called ancestral configurations (ACs) for each clade. The gene tree probability can then be computed from the probabilities of ACs of the root clade. This approach has the same spirit at the high level as the peeling algorithm (Felsenstein 1981), and is a dynamic programming algorithm as called in computer science.
ANCESTRAL CONFIGURATIONS AND RECURRENCE
Let us consider a clade v in Ts, which corresponds to a subtree rooted at a node v of Ts. S(v) denotes the set of species within v, and L(v) denotes the set of extant gene lineages from some species in S(v). For example, in Figure 1, let v be the clade of species A and B. Then, S(v) = {A, B}, and L(v) = {a, a′, b}. Note that when there is more than one gene lineage per species, the size of L(v) can be larger than the size of S(v).
A point in Ts is specified by a time and also a branch of Ts . This point can be at a node v, where the exact meaning needs to be specified if v is an interior node. That is, is the point right before (i.e., more ancient) or after (i.e., more recent) the divergence at v? This subtle difference is important for this new approach. By default, a point at node v means the exact time just before the divergence at v.
Now what gene lineages are there precisely at a node v of Ts ? When only a gene tree topology is given, there may be multiple choices. The set of gene lineages at a certain point in Ts is called an ancestral configuration (or simply configuration or AC) at this point. That is, an AC determines the set of gene lineages alive at a certain point of Ts. The number of gene lineages in a configuration AC is denoted as n(AC). Note that two different configurations may have exactly the same set of gene lineages (but at different points in Ts). So a configuration always has a fixed point about where in Ts this configuration is at. In particular, an AC at a node v of Ts is denoted as ACv. For simplicity, when the identity of node v is clear from the context, v may be omitted from ACv (i.e., just AC). Configurations may change at an interior node v depending on whether the time is just before (i.e., more ancient) or after (i.e., more recent) the species divergence at v. As a convention, ACv refers to the configuration just before the divergence at v. Also, since a configuration is associated with a particular point of Ts, a configuration also corresponds to a specific clade of Ts . In the following, the configuration and the clade it is associated with are used interchange-
ably. When I say extant gene lineages under a configuration, I mean extant gene lineages from some species in this clade. As an example, in Figure 1, let us consider the root clade r(Ts) which contains species A, B, C, D, E, F, and G. The coalescent history of the gene tree topology shown in Figure 1 corresponds to a single configuration with two gene lineages at the root clade: ACr(Ts ) = {m, k}, and n(ACr(Ts )) = 2. The set of species under this configuration is {A, B, C, D, E, F, G}, and the set of extant gene lineages under this configuration is {a, a′, b, c, d, e, f, g}. However, if only a gene tree topology is given, then there are 19 other configurations at r(Ts): {a,a′,b,c,d,e, f,g}, {a,a′,b, c,d, f, j}, {a,a′,b,c,e,g,h}, {a,a′,b,c,h, j}, {a,a′,b,c,k}, {a,c,d,e, f,g,i}, {a,c,d, f,i, j}, {a,c,e,g,h,i}, {a,c,h,i, j}, {a,c,i,k}, {c,d,e, f,g,l}, {c,d, f, j,l}, {c,e,g,h,l}, {c,h, j,l}, {c,k,l}, {d,e, f,g,m}, {d, f, j,m}, {e,g,h,m}, {h, j,m}.
Ancestral configuration is the key definition of this article. I now give more details on constructing ACs. The set of all possible configurations for a node v in Ts is denoted as ACv. When v is a leaf, ACv = {L(v)}, because there is no time for coalescent events to occur yet. When v is an interior node, the left and right descendant nodes of v are denoted as vl and vr , respectively. Then ACv depends on gene tree topology Tg, ACvl , and ACvr . Consider a configuration ACvl ∈ ACvl . When tracing backward from vl to v, a set of configurations may be obtained at the point just below v (i.e., still along the branch between vl and v) from ACvl during this time interval. This set of configurations obtained by coalescing lineages in an AC along a single species tree branch is called the coalesced ancestral configurations (CACs) from an AC, and is denoted as CAC(AC). For example, in Figure 1, consider a coalescent history different from that shown in Figure 1 where no coalescent events occur among gene lineages a,a′,b, and c. This gives a possible configuration that is AC = {a, a′, b, c} at the left descendant of the root. Then, CAC(AC) = {{a,a′,b,c},{a,i,c},{c,l},{m}}. CAC(AC) can be easily constructed by recursively applying all allowed coalescent events. The set of CACs just below v along the branch (vl , v) (i.e., just after the divergence at v toward vl ) derived from some configuration of vl is denoted as AC−v,l, where AC−v,l = ∪CAC(ACvl ) and the union is over all ACvl ∈ ACvl . Similarly, the set of CACs for vr is denoted as AC−v,r, where AC−v,r = ∪CAC( ACvr ) and the union is over all ACvr ∈ ACvr . For example, in Figure 1, let us consider again the root clade r(Ts) whose left and right descendants are r (Ts )l and r (Ts )r , respectively. Then: ACr(Ts)l = {{a,a′,b,c},{a,c,i},{c,l}}, ACr(Ts)r =
figurations at v (right before the divergence at v) are obtained by
{{d,e, f,g}}, AC− r(Ts),l
= {{a,a′,b,c},{a,c,i},{c,l},{m}}, and AC− = {{d,e, f,g},{d, f, j},{e,g,h},{h, j},{k}}.
r(Ts),r
Equation (2) illustrates how to construct ACv. That is, con-
 766 EVOLUTION MARCH2012

         pooling configurations at the point right after the divergence toward vl and vr . This is because there is no time for any coalescent events to occur during this “fusion.”
ACv = {AClc ∪ ACrc : AClc ∈ AC−v,l, ACrc ∈ AC−v,r }. (2)
For a configuration AC at some point of Ts , the probability p( AC ) of AC is the probability of extant gene lineages under AC transforming to ancestral gene lineages in AC by some coalescent events between the present time and this particular point of the configuration AC, where the coalescent events are consistent with the given gene tree topology Tg and the given species tree Ts at the time specified by AC in Ts. The coalescent event between gene lineages a and b is consistent with Tg and Ts at certain time t in Ts if(i)aandbmeetatanodeofTg (i.e.,theendingnodesofa and b are siblings of Tg ), (ii) the species for a and b are contained in the subtree of Ts below t, and (iii) a and b have at least some time to coalesce (i.e., species of a and b are not just diverging at t). For example, let AC = {k, m} be a configuration at the root in Figure 1. Then p(AC) is the probability of gene lineages a, a′, b, c, d, e, f, and g transforming into gene lineages k and m at the root by six coalescent events as specified by Tg . To illustrate the concept of consistency of coalescent events regarding to Tg and Ts, let us consider the divergence point t1 of the species D and E in Ts . The coalescent event between gene lineages d and e is not consistent with Tg and Ts at t1 because d and e do not meet at a node of Tg. The coalescent event between d and f is not consistent with Tg and Ts at t1 either because the species F is not under t1. Let t2 be the divergence point of clades {D, E} and {F, G} in Ts . The coalescent event between d and f is not consistent with Tg and Ts at t2 because the species D and F are just diverging at t2 and there is no time for d and f to coalesce yet. Such a coalescent event will be consistent for a time a little
more ancient than t2.
Consider a branch b of Ts with length λb, and suppose a
configuration AC1 at the descendant node of b transforms to a configuration AC2 at the ancestral node of b through coalescent events. pt(AC1, AC2,b) is the probability (called transition probability) that AC1 coalesces to AC2 along the branch b. Then:
pt(AC1, AC2,b) = pn(AC1)n(AC2)(λb) ωb(AC1, AC2). (3) db(AC1, AC2)
Here, ωb(AC1, AC2) is the number of ways that coalescent events on the branch b can occur to transform AC1 into AC2, and db(AC1, AC2) is the number of possible ordering of the n(AC1) − n(AC2) coalescent events. Note that both require the coalescent events satisfying the constraints imposed by the gene tree topology. These two factors can be computed by formulas given in Degnan and Salter (2005). Also recall puv (T ) is
defined in equation (1). When there exists no coalescent events transforming AC1 into AC2, pt(AC1, AC2,b) = 0.0.
For a leaf node v of Ts, there is a single configuration
ACv = Lv, and p(ACv) = 1.0. Now let us consider an interior
node v of Ts, whose left and right descendants are vl and vr,
respectively. The branch between v and vl (respectively vr ) is
denoted as bl (respectively br). From equation (2), each con-
figuration at v can be written as ACv = AClc ∪ ACrc, where
AClc ∈ AC−v,l and ACrc ∈ AC−v,r . Note that multiple configura-
tions can transform into the same configuration along a branch.
SPECIES TREE INFERENCE UNDER LINEAGE SORTING
So,
p(ACv) = p􏰚AClc ∪ ACrc􏰛 = p􏰚AClc􏰛p􏰚ACrc􏰛, 􏰚c􏰛􏰗 􏰚 c􏰛
p(ACr)pt ACr,ACr,br .
(4) (5) (6)
p(ACl)pt ACl,ACl,bl, 􏰚c􏰛􏰗 􏰚 c􏰛
pACl = p ACr =
ACl ∈ACvl ACr ∈ACvr
consider clade vl = {A, B,C}
For
ure 1, with ACvl = {{a,a′,b,c},{a,c,i},{c,l}}. For clade vr = {D,E,F,G}, ACvr ={{d,e,f,g},{d,f,j},{e,g,h},{h,j}}. Let C AC1 = {m} be a configuration just below the root (along the left branch bl of the root). For C AC2 = {d, f, j} just below the root (along the right branch br of the root). Then,
p({d, f, j,m})
p(CAC1)
p(CAC2)
= p({m}∪{d, f, j})
= p(C AC1)p(C AC2),
= p({a,a′,b,c})pt({a,a′,b,c},{m},bl)
+ p({a,c,i})pt({a,c,i},{m},bl)
+ p({c,l})pt({c,l},{m},bl),
= p({d,e, f,g})pt({d,e, f,g},{d, f, j},br)
+ p({d, f, j})pt({d, f, j},{d, f, j},br).
example,
in Fig-
Suppose the probabilities for the configurations at the root r (Ts ) of Ts have been computed, then the gene tree probability can be computed using equation (7). Let us create an imaginary configuration AC∗ = {r(Tg)}. Recall that r(Tg) is the root gene lineage of the gene tree topology Tg and b = 0 refers to the root branch of Ts . For the root clade in Figure 1, one needs to sum over all 20 configurations (listed before).
 P(Tg|Ts) =
􏰗∗ p(AC)pt(AC, AC ,0). (7)
AC∈ACr(Ts)
The number of needed configurations can be further reduced by merging “equivalent” configurations. Due to the lack of space, the details are provided in the Appendix.
 EVOLUTION MARCH2012 767

         YUFENG WU
ALGORITHM FOR COMPUTING GENE TREE PROBABILITY
The algorithm for computing gene tree probability is as follows.
1. For each leaf node s of the species tree Ts , find the set of gene lineages L (s ) from the species s . Create a configuration ACs = L(s), and set p(ACs) = 1.0.
2. For each interior node v of Ts ordered by a postorder traversal:
2.1 DoconstructCACsforconfigurationsintheleftdescendant vl and the right descendant vr of v, respectively. Compute the probabilities of CACs with equation (4).
2.2 Do combine CACs that are equivalent.
2.3 Do generate configurations at v by combining left and
right CACs as in equation (2) and compute their prob-
abilities as in equation (4).
3. Compute the gene tree probability using equation (7).
The running time of the above algorithm depends on the number of configurations constructed and processed by the algorithm. The number of configurations is usually much smaller than the number of coalescent histories.
THE TOTAL NUMBER OF ANCESTRAL CONFIGURATIONS
I now show results on the total number of configurations (by summing over all nodes of the species tree) when the gene tree topology T is the same as the topology of the species tree. The first case is the maximally asymmetric tree, that is, the rooted caterpillar tree. A rooted caterpillar tree with n leaves can be constructed recursively by adding a new leaf as the sibling of the root of a rooted caterpillar tree with n − 1 leaves. As given in Degnan and Salter (2005), the number of coalescent histories for the maximally asymmetric tree is equal to the Catalan number, which is asymptotically equal to 4n−1/√π(n − 1)3/2. That is, the number of coalescent histories grows exponentially with the number of species. The second case is the maximally symmetric (i.e., fully balanced) tree, where the number of coalescent histories is also exponential. The total numbers of configurations constructed by the new algorithm (after removing symmetric configurations) and the number of coalescent histories in Degnan and Salter (2005) for these two types of trees are shown in Table 1.
Table 1 shows that the number of configurations is orders of magnitude smaller than the number of coalescent histories. In the Appendix, I give rigorous analysis on the number of configurations for several types of trees, where I show the new method outperforms the method in Degnan and Salter (2005) both in theory and in practice for at least one of these cases. In particular, the numbers of configurations for the maximally asymmetric trees are bounded by a polynomial of the number of species. Simulation in the Results section shows that the new method runs much faster
Ta b l e 1 . The total number of configurations constructed in the new algorithm (with equivalent configurations removed), compared to the number of coalescent histories in Degnan and Salter. The topology of the species tree is the same as that of the gene tree topology. n = the number of species. #AC = the number of configurations. #H = the number of coalescent histories in Degnan and Salter.
 #AC #H
n Asymmetric Symmetric Asymmetric
    410 10 515 15 621 21 7 28 28 8 36 36 9 45 49
10 55 63 12 78 90 16 138 193 20 210 555 30 465 4425
Symmetric
5 4 14 10 42 25
132
 65 169 481 1369 11, 236 1, 020, 100 1,767,263,190 100,360,324
––
 429 1430 4862
 58, 786 9, 694, 845
   than Degnan and Salter’s method (implemented in the program COAL).
Maximum Likelihood Inference
of Species Tree with Gene Tree Topologies
I now present a new method for maximum likelihood inference of the species tree with gene tree topologies. The new method is based on the more efficient gene tree probability algorithm described in the previous section. Suppose a set of gene tree topologies T = {Ti} is given, where i = 1... K. A simplifying assumption is made that each Ti ∈ T is independent of the other trees in T given the species tree. This is a common assumption (e.g., see Felsenstein 2004; Maddison 1997), which may be valid when there is free recombination between genes. The coalescent model is also assumed, which is the foundation of the new approach. The maximum likelihood estimate of the species tree (denoted as MLE) is the species tree Ts that maximizes the following likelihood function:
 768 EVOLUTION MARCH2012
L(Ts|T ) =
􏰢K i=1
P(Ti|Ts). (8)
When n (the number of species) is small, all possible topologies for Ts may be simply enumerated, and then branch lengths of Ts are assigned in some way and one can use the program COAL to evaluate Ts. This is the approach taken in Carstens and Knowles (2007). However, as noted in Carstens and Knowles
 
         (2007), such an approach may easily miss the true MLE because it only examines a small portion of the tree space and the tree space is immense. I now develop a new algorithm, which is designed to find the MLE in an efficient and accurate way. I name this algorithm STELLS . The STELLS algorithm uses the following strategy to find the MLE.
1. Findasetofspeciestreetopologiesastheinitialtopologies of the MLE.
2. For each initial topology Ts :
(a) IfTs hasnotyetbeenevaluatedbefore,searchforbranch
lengths of Ts that maximize the likelihood of the gene
tree topologies in equation (8).
(b) Apply the nearest neighbor interchange transforma-
tion of Ts . Compute the likelihood of each neighboring
topology as in step 2(a).
(c) Ifthehighestlikelihoodfromaneighboringtreeislarger
than that of Ts , set Ts to this neighboring tree and continue to step 2(a). Otherwise, continue to step 2 with the next initial topology.
3. Report the species tree with highest likelihood as the MLE.
Note from now on, there are multiple gene tree topologies. The likelihood of these gene tree topologies is equal to the product of the probability of each gene tree topology. Although the STELLS algorithm uses heuristics in searching for the MLE and so it may sometimes miss the true MLE, such heuristics are commonly used in phylogenetics and the simulation results show that the heuristics work well (see the Results section).
FINDING INITIAL SPECIES TREE TOPOLOGIES
I now describe how to find initial species tree topologies that may be good starting points in exploring the tree space. A relatively small set of initial topologies that are likely to lead to the MLE is needed. The user can configure the initial tree search: the current implementation of STELLS allows the user to choose how many initial trees to consider. It also allows the user to specify a list of initial species trees to use. In the following, I use the minimize deep coalescent (MDC) formulation to find initial tree topologies, with the understanding that other methods can also be used to find initial trees.
Suppose the MDC objective is computed for each possible species tree topology (i.e., the total number of extra lineages of all gene tree topologies for this species tree), and the distinct MDC objectives are listed in an increasing order: mdc0 < mdc1 < mdc2 ··· < mdcK∗ (where mdc0 is the most parsimonious solution). Then species tree topologies can be divided into classes, where each class is ranked by the MDC objective. There can be multiple topologies in a class. STELLS uses the tree topologies from the first Kc classes as the initial trees. The approach for constructing near MDC-parsimonious species tree
topologies is similar to the dynamic programming approach in Than and Nakhleh (2009). The details are omitted here. The user can either choose the number of MDC classes or the maximum number of initial trees. Note that the more initial trees are used, the slower the algorithm will be. On the other hand, using more initial trees may improve the chance of finding the MLE.
FINDING OPTIMAL BRANCH LENGTHS FOR A FIXED
SPECIES TREE TOPOLOGY
For each candidate topology, the space of full species trees (i.e.,
with branch lengths) is explored from this topology. Branch length
units are in the standard coalescent units. That is, let g be the
number of generations along the branch, the branch length is g , 2Ne
where Ne is the effective population size. I do not have analytical or exact computational solutions for the problem of finding optimal branch lengths for a fixed species tree topology that maximize the likelihood function defined in equation (8). In order to develop a practical method, I develop an iterative method based on the well-known Brent’s method (Brent 1973). In particular, the length of each branch in the species tree topology is first initialized to be 1.0. The initial likelihood for this default species tree is computed. Then, each branch is considered separately by varying the length of this branch and fixing the other branch lengths. Brent’s method is used for finding the optimal branch length of this branch and then updating this branch with this new optimal length. This process is iterated until the change of likelihood is smaller than a predetermined threshold.
Note that when branch lengths change, the probabilities of configurations need to be updated, whereas configurations themselves remain unchanged. Here, using ACs again has its advantage over using enumerated coalescent histories in Degnan and Salter (2005). Suppose the length of branch b is changed (and all other lengths remain the same), where node v is the ancestor node of the branch. Then only the configurations at clades that are rooted at the path from v to r(Ts) (the root of Ts) need to be recomputed after the change. For example, suppose the length of the branch ending at species A in the species tree of Figure 1 is changed. Then, probabilities need to be updated only for the configurations at species LCA(A,B), LCA(A,B,C), and the root of the species tree. This reduces the time spent on recomputation of the probabilities. On the other hand, the probability of each coalescent history needs to be updated when the length of b changes, if the enumeration method of Degnan and Salter (2005) is used.
IMPLEMENTATION AND APPROXIMATE INFERENCE FOR LARGER DATA
I have implemented the STELLS algorithm in a program (also named as STELLS), which can be downloaded at: “http://www.engr.uconn.edu/∼ywu/STELLS.html”. The
SPECIES TREE INFERENCE UNDER LINEAGE SORTING
  EVOLUTION MARCH2012 769

         YUFENG WU
program STELLS has two main functions. The input to STELLS is one or more gene tree topologies. If a species tree is given, the program STELLS first computes the likelihood for the species tree, and then finds the best branch lengths of the species tree with the highest likelihood. If no species tree is given, then the program STELLS searches for the MLE by exploring the space of species trees.
The efficiency of the search for the MLE depends on the size of data and also the settings provided by the user. By default, the program STELLS uses all the tree topologies from the top five MDC classes as initial trees, and then performs heuristic search from these initial trees. In the species tree inference mode, the program STELLS becomes slow as the size of trees and the number of gene trees increase (say 100 gene trees, each with 20 taxa). To allow inference on larger data, STELLS allows users to specify a threshold nC for the maximum number of configurations to keep in a clade, or turn off heuristic search (i.e., only evaluating initial trees). If nC is set to a finite value, at most nC configurations with higher probability are kept at a node. By default, nC = ∞ (i.e., all configurations are kept). Dropping some configurations with smaller probabilities can give inaccurate probabilities. But this allows STELLS to scale to larger data. There is a trade-off between accuracy and efficiency.
DESIGN OF THE SIMULATION STUDY
To evaluate the new algorithm, I run the STELLS algorithm and several other methods for species tree inference under lineage sorting on simulated datasets, where the true species trees are known. I generate datasets with varying numbers of gene trees K . The number of taxa is fixed to be eight. One gene lineage is sampled for each species. For each parameter setting, I simulate 50 datasets.
1. I use 50 species trees simulated by Huang et al. (2010). To test the effect of tree heights on inference accuracy, the species trees are scaled so that the average distance from a leaf to the root is equal to a given tree height. In this simulation, two tree height values are used: 0.5 or 5.0.
2. For each species tree, a set of K gene trees are generated using the program COAL, where there is one gene lineage per species.
Note that exact true branch lengths of gene trees are given
by the simulated gene trees. Accurate branch lengths can give a large advantage to methods using branch lengths (e.g., STEM). The results show that STEM is more accurate than STELLS when accurate gene trees are given. Note that in practice, gene trees are inferred from sequences and thus there are always errors in topology and branch lengths of gene trees. See Huang et al. (2010) for an extensive discussion on the effect of noise on species tree inference.
I now explain how gene trees are inferred. First, the program Seq-Gen (Rambaut and Grassly 1997) is used to simulate gene sequences of 1000 base pairs from the true gene trees under the HKY model (Hasegawa et al. 1985), with a transition/transversion ratio of 3.0. The rest of parameters of Seq-Gen are set to default values (i.e., four nucleotides with all equal frequencies). Then, the DNAMLK utility of the program PHYLIP (Felsenstein 1989) is used to infer the maximum likelihood gene trees from the simulated sequences. The correct transition/transversion ratio is used when running DNAMLK. Because STEM requires ultrametric trees, DNAMLK is used so that the inferred trees are ultrametric. The trees inferred by DNAMLK are also rooted.
Results
SPECIES TREE INFERENCE
For comparison, the following methods are tested:
1. STELLS: the new maximum likelihood algorithm developed in this article.
2. STEM: the maximum tree method (Liu et al. 2010). This is a maximum likelihood method and is implemented in the program STEM (Kubatko et al. 2009).
3. MDC: a parsimony-based approach (Maddison and Knowles 2006; Than and Nakhleh 2009); the implementation in Than and Nakhleh (2009) is used.
4. STAR: this summary statistics-based method is developed by Liu et al. (2009).
All the above methods take gene trees (or gene tree topologies) as input. Note that STELLS and MDC work with gene tree topologies only, whereas STEM and STAR require full gene trees (i.e., with branch lengths).
To evaluate the accuracy of inferred species trees, the number of missed branches in the inferred species tree T is used (i.e., clades B(T, T ∗) in the true species tree T ∗ but not in T ), which is divided by the number of internal clades in T ∗ . This is essentially the normalized Robinson–Foulds distance (Robinson and Foulds 1981) between T and T ∗ .
∗ |B(T,T∗)| β(T,T)= n−3 .
Note that β(T , T ∗ ) is between 0.0 and 1.0, and measures the inference error. The accuracy of species tree inference (in terms of inference error) is listed in Figure 2. Inference error is calculated from results on 50 replicated datasets with eight species. Two types of results are given in Figure 2: inference accuracy (in terms of error rate) for the true gene trees (dashed lines) and inferred gene trees using simulated DNA sequences from the true gene trees (solid lines). To evaluate the effect of species tree depth, we give results for shallow species trees (with average tree depth 0.5) and deep species trees (with average tree depth 5.0).
  770 EVOLUTION MARCH2012

         Figure 2. Comparing performance of STELLS with STEM, MDC, and STAR. There are eight species, and one gene lineage is sampled from a species. Horizontal axis: the number of gene trees K, varying from 5 to 500. Vertical axis: the average inference error (the Robinson– Foulds distance, normalized to be between 0.0 and 1.0). For comparison, results are shown for both gene trees inferred from simulated sequences (the solid lines) and gene trees with perfect topologies and branch lengths (the dashed lines, denoted as p). (A) Inference error for species trees with average height being 0.5. (B) Inference error for species trees with average height being 5.0.
Let us first look at the inference accuracy on simulated gene trees with accurate branch lengths. Results are shown in part (A) and part (B) of Figure 2 (dashed lines), where part (A) is for shallow species trees and part (B) is for deep species tree. One can see that STEM clearly is the best: the inference error of STEM is much smaller than other methods in both cases. STELLS is more accurate than MDC in most cases, and also more accurate than STAR in many cases. To evaluate the effect of noise in input tree topology and branch length, let us now look at simulation results on noisy gene trees (inferred from simulated sequences with the true gene trees) in parts (A) and (B) of Figure 2 (solid lines). The results illustrate the effect of gene tree noise on the performance of these methods. STELLS becomes more accurate than STEM when more gene trees are provided. It can also be seen that STELLS is consistently more accurate than MDC with the inferred gene trees. STELLS and STAR have similar accuracy: STELLS is slightly more accurate with fewer gene trees and STAR is slightly more accurate with more gene trees (say 500). As expected, each method gives less-accurate inference results with noisy data, although STELLS and STAR appear to be more tolerant to noise. Overall, STELLS performs well comparing to other methods with noisy gene trees. Note that these simulation results are not meant to be conclusive: there are many factors that may affect the accuracy of various methods, and more studies may be needed to further understand strengths and weakness of these methods.
The running time of various methods is also evaluated. Simulation results show that STELLS runs slower than the other methods. For example, for datasets with eight species and 100 gene trees, the average running time of STELLS is around 6 min on a 3192 MHz Intel Xeon workstation, whereas both STEM and MDC take a fraction of 1 sec. STAR takes about 4 sec on average for these datasets. This is expected: STELLS needs to search for the tree that maximizes the likelihood, which is more difficult computationally than the computation performed by the other methods.
COMPUTING GENE TREE PROBABILITY
I now evaluate the efficiency of the new algorithm in computing gene tree probability. For this purpose, the program STELLS is used to compute the probability of five gene tree topologies for each simulated species tree with 5, 10, 15, 20, 25, and 30 species. For comparison, the program COAL is also run for the same trees. The results are consistent with the results shown in Table A1, and are omitted. The results show that the program STELLS is much more scalable than the program COAL. Thus, STELLS is more suitable for computationally intensive tasks such as species tree inference. Moreover, for many gene tree topologies with 20 species or more, the probability computed by the program COAL becomes zero. This may be due to numerical issues: the probability computed by the program COAL is a summation of a large number of terms; each term is a product of multiple factors;
SPECIES TREE INFERENCE UNDER LINEAGE SORTING
  EVOLUTION MARCH2012 771

         YUFENG WU
 The two candidate species tree topologies found by MDC for the Apicomplexan dataset. The left one has the highest likelihood found by STELLS but is the second in the MDC objective. The right one is the best in the MDC objective.
thus, when data size grows, a term may become very small and cause a numerical underflow. In contrast, STELLS is more accurate when data size increases, because only a small number of terms are maintained and each term is likely to be larger because it combines many coalescent histories.
BIOLOGICAL DATA
The program STELLS is run on the Apicomplexan dataset (Kuo et al. 2008), which contains 268 gene tree topologies for eight species. This dataset was originally analyzed in Kuo et al. (2008), which infers the species tree by concatenating gene sequences (shown on the left in Fig 3) . In Than and Nakhleh (2009), the MDC approach found a different tree as the optimal species tree, as shown on the right in Figure 3. This tree on the right has 440 extra lineages, while the tree on the left has 469 extra lineages. The MLE found by the STELLS algorithm is the tree on the left. That is, the maximum likelihood species tree is identical to the species tree obtained by concatenation, and is different from the MDC optimal tree. There were more discussions on which of the two species trees is more likely to be correct in Than and Nakhleh (2009), where two hypotheses were stated on where to place species Cp in the species tree. The results in this article indicate that this issue may need more evidence to resolve. Because gene trees in the Apicomplexan dataset do not have branch length information, STEM and STAR are not run for this dataset.
Discussion
In this article, I develop a new algorithm called STELLS. Similar to STEM, STELLS is based on coalescent models. I first give a new algorithm for faster computation of the gene tree probability, which may potentially be useful on its own. Building on the new gene tree probability computation method, STELLS searches for the species tree that maximizes the likelihood by exploring the tree space. I show results on both simulated and biological data, where the STELLS algorithm performs competitively in terms of accuracy.
A major issue to address is the noise in the input data. The issue of noisy input has recently been empirically investigated in Huang et al. (2010), which showed noise in gene trees can have significant impact on inference accuracy. It is also observed in Huang et al. (2010) that using more information contained in gene trees (e.g., topology and branch lengths as opposed to just topology) may not improve accuracy. Noise in gene trees may come from topology, branch length, and rooting. When the accuracy of the inferred gene trees is believed to be high, the program STEM can be a good choice because it is more accurate than the STELLS algorithm. However, noise in gene trees is difficult to eradicate and simulation shows that STELLS is often more accurate than STEM with noisy gene tree topologies (i.e., those inferred from sequences) especially when more gene tree topologies are given. Simulation results show that STELLS is almost consistently more accurate than MDC. This may suggest that STELLS captures some properties of species trees that are missed by MDC. The STAR approach appears to be perform competitively in the simulation, although STELLS is still slightly more accurate than STAR in many cases.
The STELLS algorithm is based on a faster algorithm for computing the gene tree probability. Initial research based on gene tree probability computation shows that there can be discordance between a species tree and its mostly likely gene tree topology (Degnan and Rosenberg 2006). In this article, maximum likelihood based on gene tree probability is used to infer species trees, and reasonably accurate species trees can be obtained. Inferred species trees become more accurate when more gene tree topologies are provided. That is, multiple gene tree topologies together provide information on the underlying species tree, despite the reported discordance in Degnan and Rosenberg (2006).
Unlike Bayesian approaches (Liu and Pearl 2007; Liu 2008; Heled and Drummond 2010; Fan and Kubatko 2011), our probabilistic model does not need additional parameters except the species tree itself, and there is no need to specify a prior distribution or hyperprior parameters. The users of the program STELLS do not have to make difficult choices about what parameters to use (although sometimes parameters need to be chosen for the matter of scalability). On the other hand, there are several aspects of speciation and population evolution that may affect the accuracy of STELLS. Variation in effective population sizes and mutation rates along different branches of the species tree may lead to less-accurate gene tree inference. Although STELLS does not directly take gene sequences as input, its inference accuracy can nonetheless be affected. The magnitude of effect from such variation across genes on inference accuracy for STELLS is still unknown.
The program STELLS takes gene tree topologies as input for inferring the species tree. In practice, gene tree topologies need to be inferred from gene sequences. There is no doubt that noise
F i g u r e
3 .
 772 EVOLUTION MARCH2012

         can be introduced in this two-stage approach. It is an attractive research direction to develop accurate and efficient approaches that infer the species tree directly from gene sequences.
ACKNOWLEDGMENTS
This work was supported by U.S. National Science Foundation grants IIS-0803440 and CCF-1116175. I thank L. Kubatko for useful discussions. I also thank L. Kubatko and H. Huang for sharing the simulation data.
SPECIES TREE INFERENCE UNDER LINEAGE SORTING
Appendix
Associate Editor: L. Kubatko
PROPERTIES ANCESTRAL CONFIGURATIONS
I now study properties of ancestral configurations. I first show that the number of configurations kept during gene tree probability computation can be reduced by merging equivalent configurations. I then investigate how many configurations are needed for several types of gene trees and species trees.
REDUCTION OF ANCESTRAL CONFIGURATIONS
The key advantage of using ancestral configurations in computing gene tree probability over the enumeration approach in Degnan and Salter (2005) is that the number of configurations is typically much smaller than the number of histories when data size increases (as shown later in this section). Computation time of P (Tg |Ts ) depends on the number of configurations used in the algorithm. Thus, it is critical to further reduce the number of configurations. An observation is that equivalency in configurations sometimes allows pooling of configurations even when the configurations contain different sets of gene lineages.
Consider two configurations {d, f, j} and {e, g, h} right at the clade {D, E, F, G} in the species tree of Figure 1. At the first look, both of these two ACs need to be kept for this clade because they contain different gene lineages. However, a closer look reveals that the two configurations are equivalent if the mappingd↔e,f ↔g,j↔hisused.Asdescribedinthefollowing, these two ACs are equivalent and can be pooled (i.e., sum
 EVOLUTION MARCH2012 773

         YUFENG WU
Table A1. The total number of configurations constructed in the new method (with equivalent configurations removed), compared to the number of coalescent histories in the program COAL, for the type of trees in Figure A1. n = the number of species; #AC = the number of configurations; T (STELLS) = running time (in seconds) of the program STELLS; #H = the number of histories in Degnan and Salter. For n = 20, the program COAL reports a negative number (−2,147,483,648), which apparently is caused by a numerical overflow. T (COAL) = running time (in seconds) of the program COAL.
n 4 6 8 10 12 14 16 18 20
  #AC 10 21 40 75 142
T(STELLS) <1 <1 <1 <1 <1 #H 4 26 226 2426 30,826 T (COAL) <1 <1 <1 <1 <1
the probability of these two configurations and remove one of them).
To be equivalent, two configurations AC1 and AC2 must be at the same point in Ts (and thus are associated with the same clade C in Ts ). The gene lineages in AC1 and AC2 are first partitioned based on maximal subtrees induced by C . The concept of maximal subtrees is used in Than and Nakhleh (2009). To see how this partitioning works, imagine gene lineages in a configuration AC are traced upwards by performing all permitted coalescent events between the gene lineages being traced. I say two gene lineages x and y are permitted to coalesce according to AC if (i) x and y are diverging from some node in Tg (i.e., the ending nodes of x and y are siblings of Tg ), and (ii) there is time for x and y to coalesce (i.e., x and y are not allowed to coalesce if AC is at some node v of Ts and x and y are on different subtrees of v). Once two gene lineages coalesce, one may continue to trace the coalesced gene lineage upwards. Note only gene lineages in AC and those coalesced gene lineages are considered. That is, a gene lineage being traced cannot coalesce with a gene lineage not being traced (i.e., those from species not in the species clade C). Such tracing leads to one or multiple terminal gene lineages. I say each of these terminal gene lineages corresponds to a maximal tree of Tg for AC, and the gene lineages of AC that trace upwards to this terminal gene lineage belong to this maximal tree. For example, in Figure 1, let us consider the AC = {d, e, f, g} at the species clade {D, E, F, G}. Then there are four maximal subtrees (which contain exactly d, e,
f , and g, respectively). This is because when tracing backward, d and f (respectively e and g) are not permitted to coalesce because {D, E} and {F, G} are just diverging at the time of this configuration. As another example, consider AC = {a, a′, b, c} at the species clade {A, B, C}. AC can be partitioned into two maximal subtrees, which contain {a, a′, b} and {c}, respectively.
These maximal subtrees for AC1 and AC2 must have the same size, and are in one-to-one correspondence. To see this, consider the set of extant gene lineages L(C) from taxa in C. When new configurations at a clade C are derived by coalescent events, a maximal subtree may change but will not disappear. I define the shape of a configuration as a list of topological shapes (i.e., unla-
273 532
<1 1 451,586 7,489,426 2 39
1047 2074
1 1 138,722,426 -
978 25,611
   774 EVOLUTION MARCH2012
beled trees) of the maximal subtrees induced by the configuration. Two shapes are said to be the same if topological shapes of each pair of corresponding maximal subtrees are the same. Two configurations at the same point in Ts are equivalent if their shapes are the same. For example, in Figure 1, consider again the clade C ={A,B,C,D,E,F,G}attheexacttimeofthedivergenceof the clade, and two configurations at C: AC1 = {c,d, f, j,l} and AC2 = {c, e, g, h, l}. The gene lineages of two maximal subtrees are {c,l} and {d, f, j} for AC1, and {c,l} and {e,g,h} for AC2. Clearly, the corresponding maximal subtrees from the two pairs have the same topology. Thus, AC1 and AC2 are equivalent. It is straightforward to verify that the two configurations {d , f , j } and {e, g, h} right at the clade {D, E, F, G} in Figure 1 are equivalent.
Two equivalent configurations can be combined because such configurations contain exactly the same topological constraints in ordering coalescent events in gene lineages in the configurations and thus all the corresponding transition probabilities for the two configurations are identical backward in time from this point. Thus, the two configurations can be combined. Also note that reducing the number of configurations at an interior node also reduces the number of configurations at its ancestral nodes. In practice, this sometimes significantly reduces the number of configurations needed.
COUNTING ANCESTRAL CONFIGURATIONS
I now give detailed analysis of the number of configurations for several cases when the species tree has the same topology as the gene tree topology. I first show two cases where there is polynomial number of configurations, while there are exponential number of coalescent histories. That is, the new algorithm clearly outperforms the enumeration method in Degnan and Salter (2005). Next, I show the number of configurations is still exponential in n (the number of species) for another type of trees.
The first case is the maximally asymmetric tree. As given in Degnan and Salter (2005), the number of coalescent histories for this case grows exponentially. I now show that the number of configurations is a quadratic function of n. I define the height of a node in a tree to be the number of edges along the
 
         longest path from the node to a leaf plus one. Consider a clade at height k (which has k leaves), and let N(k) be the number of configurations kept by this clade. Now consider the clade with k + 1 leaves, which is formed by adding a new lineage as the sibling to the clade of k leaves. Note that when k ≥ 2, there are precisely N(k) + 1 ancestral configurations from the clade of k leaves just under the clade of k + 1 leaves. This is because there is exactly one new configuration with a single gene lineage in addition to the original N(k) configurations. These N(k) + 1 configurations are then combined with the gene lineage as the sibling of the clade of k leaves to form the configurations for the clade with k + 1 leaves. Thus, the number of configurations kept at the clade with k + 1 leaves is equal to N(k) + 1. Here, N (1) = 1 and N (2) = 1. So, the total number of configurations at all the nodes is (noting that there are n leaves, each with one configuration):
Figure A1. A tree shape where the number of configurations is exponential in n.
Here, height of a leaf is 1. Note that N (3) = 4, and the
􏰗n
(k − 1) =
n ( n + 1 ) 2 .
n +
Thus, the new algorithm runs in polynomial time (in terms
of n) for this case.
Unfortunately, there are still trees where the number of con-
figurations is exponential in n. We consider the maximally symmetric (i.e. fully balanced) tree, which is also studied by Degnan and Salter (2005). Due to equivalency, all nodes at the same height k have the same number of configurations N(k) + 1. The node at height k + 1 with two children at height k. Each child has N(k) + 1 configurations (the original N(k) configurations plus the new configuration with a single gene lineage). Configurations from these two children are combined to form the configurations for the node at height k + 1. Then:
N(k+1)=(N(k)+1)2 >N(k)2.
k=2
SPECIES TREE INFERENCE UNDER LINEAGE SORTING
  height of the tree m = log2(n) + 1. Thus, N(m) > N(3)2m−3 = n
2 2 . That is, the number of configurations at the root clade is an exponential function of n, although it is still much smaller than the number of coalescent histories as shown in Table 1. Note that the above analysis does not consider removing equivalent configurations.
 In Table A1, I compare the performance of programs STELLS and COAL in gene tree probability computation for the types of trees in Figure A1. Clearly, the program STELLS is still much faster than the program COAL in this case: it appears that STELLS spends more time on each AC than the time spent by COAL on a history, but overall is much faster than the program COAL. Note that STELLS is not an approximation: it computes exactly the same gene probability as the program COAL.
 EVOLUTION MARCH2012 775
